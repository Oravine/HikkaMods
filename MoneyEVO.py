# https://github.com/Oravine/HikkaMods

# You can redistribute it and/or modify it under the terms of the GNU AGPLv3
# https://www.gnu.org/licenses/agpl-3.0.html

#Created by Telegram user: @Oravine
#Hikka Module


#‚ï≠‚îÅ‚îÅ‚îÅ‚ïÆ
#‚îÉ‚ï≠‚îÅ‚ïÆ‚îÉ
#‚îÉ‚îÉ‚ï±‚îÉ‚îÉ‚ï≠‚îÅ‚ïÆ‚ï≠‚îÅ‚îÅ‚î≥‚ïÆ‚ï≠‚ïÆ‚ï≠‚ïÆ‚ï≠‚îÅ‚ïÆ‚ï±‚ï≠‚îÅ‚îÅ‚ïÆ
#‚îÉ‚îÉ‚ï±‚îÉ‚îÉ‚îÉ‚ï≠‚ïØ‚îÉ‚ï≠‚ïÆ‚îÉ‚ï∞‚ïØ‚îÉ‚î£‚î´‚îÉ‚ï≠‚ïÆ‚ïÆ‚îÉ‚îÉ‚îÅ‚î´
#‚îÉ‚ï∞‚îÅ‚ïØ‚îÉ‚îÉ‚îÉ‚ï±‚îÉ‚ï≠‚ïÆ‚î£‚ïÆ‚ï≠‚ïØ‚îÉ‚îÉ‚îÉ‚îÉ‚îÉ‚îÉ‚îÉ‚îÉ‚îÅ‚î´
#‚ï∞‚îÅ‚îÅ‚îÅ‚ïØ‚ï∞‚ïØ‚ï±‚ï∞‚ïØ‚ï∞‚ïØ‚ï∞‚ïØ‚ï±‚ï∞‚ïØ‚ï∞‚ïØ‚ï∞‚ïØ‚ï∞‚îÅ‚îÅ‚ïØ


from .. import loader, utils
from ..inline.types import InlineCall
@loader.tds
class MoneyEVO(loader.Module):
	"""–ú–æ–¥—É–ª—å —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å–ª–æ–≤–Ω—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π —á–∏—Å–µ–ª –≤ –±–æ—Ç–µ @Mine_EVO_Bot."""
	
#meta developer: @OravineMods
	version = (1_0_0)
		
	strings = {
		'name': 'MoneyEVO',
		'menu': '<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–ù–∞–∂–º–∏—Ç–µ <i>–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫</i>, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –¥–µ–Ω–µ–≥.\n\n<blockquote><i>–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ: @OravineMods</i></blockquote>',
		'list': '<b>–°–ø–∏—Å–æ–∫ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –¥–µ–Ω–µ–≥</b>\n–ù–∞ –∫–Ω–æ–ø–∫–∞—Ö –≤ —Å—Ç–æ–ª–±–∏–∫ –Ω–∞–ø–∏—Å–∞–Ω—ã —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è. –û–Ω–∏ –∏–¥—É—Ç –æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É, –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º, —Ç. –µ. —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑, —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ.',
		'K': '<b>–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: </b><code>K</code><b>\n–°—É–º–º–∞: </b><code>–¢—ã—Å—è—á–∞</code>\n<b>–ù–∞–ø–∏—Å–∞–Ω–∏–µ:</b> <code>K</code> / <code>–∫</code>\n\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É.</i>',
		'M': '<b>–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: </b><code>M</code><b>\n–°—É–º–º–∞: </b><code>–ú–∏–ª–ª–∏–æ–Ω</code>\n<b>–ù–∞–ø–∏—Å–∞–Ω–∏–µ:</b> <code>M</code> / <code>–º</code> / <code>–∫–∫</code>\n\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É.</i>',
		'B': '<b>–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: </b><code>B</code><b>\n–°—É–º–º–∞: </b><code>–ú–∏–ª–ª–∏–∞—Ä–¥</code><b>\n–ù–∞–ø–∏—Å–∞–Ω–∏–µ:</b> <code>B</code> / <code>–±</code> / <code>–∫–∫–∫</code>\n\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É.</i>',
		'T': '<b>–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: </b><code>T</code><b>\n–°—É–º–º–∞: </b><code>–¢—Ä–∏–ª–ª–∏–æ–Ω</code><b>\n–ù–∞–ø–∏—Å–∞–Ω–∏–µ:</b> <code>T</code> / <code>—Ç</code> / <code>–∫–∫–∫–∫</code>\n\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É.</i>',
		'Qa': '<b>–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: </b><code>Qa</code><b>\n–°—É–º–º–∞: </b><code>–ö–≤–∞–¥—Ä–∏–ª–ª–∏–æ–Ω</code><b>\n–ù–∞–ø–∏—Å–∞–Ω–∏–µ:</b> <code>Qa</code> / <code>–∫–≤</code> / <code>–∫–≤–∞</code>\n\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É.</i>',
		'Qi': '<b>–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: </b><code>Qi</code><b>\n–°—É–º–º–∞: </b><code>–ö–≤–∏–Ω—Ç–∏–ª–ª–∏–æ–Ω</code><b>\n–ù–∞–ø–∏—Å–∞–Ω–∏–µ:</b> <code>Qi</code> / <code>–∫–∏</code> / <code>–∫–≤–∏</code>\n\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É.</i>',
		'Sx': '<b>–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: </b><code>Sx</code><b>\n–°—É–º–º–∞: </b><code>–°–µ–∫—Å—Ç–∏–ª–ª–∏–æ–Ω</code><b>\n–ù–∞–ø–∏—Å–∞–Ω–∏–µ:</b> <code>Sp</code> / <code>—Å–∫</code> / <code>—Å–µ–∫</code>\n\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É.</i>',
		'Sp': '<b>–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: </b><code>Sp</code><b>\n–°—É–º–º–∞: </b><code>–°–µ–ø—Ç–∏–ª–ª–∏–æ–Ω</code><b>\n–ù–∞–ø–∏—Å–∞–Ω–∏–µ:</b> <code>Sp</code> / <code>—Å–ø</code> / <code>—Å–µ–ø</code>\n\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É.</i>',
		'O': '<b>–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: </b><code>O</code><b>\n–°—É–º–º–∞: </b><code>–û–∫—Ç–∏–ª–ª–∏–æ–Ω</code><b>\n–ù–∞–ø–∏—Å–∞–Ω–∏–µ:</b> <code>O</code> / <code>–æ</code>\n\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É.</i>',
		'N': '<b>–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: </b><code>N</code><b>\n–°—É–º–º–∞: </b><code>–ù–æ–Ω–∏–ª–ª–∏–æ–Ω</code><b>\n–ù–∞–ø–∏—Å–∞–Ω–∏–µ:</b> <code>N</code> / <code>–Ω</code>\n\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É.</i>',
		'D': '<b>–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: </b><code>D</code><b>\n–°—É–º–º–∞: </b><code>–î–µ—Ü–∏–ª–ª–∏–æ–Ω</code><b>\n–ù–∞–ø–∏—Å–∞–Ω–∏–µ:</b> <code>D</code> / <code>–¥</code>\n\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É.</i>',
		'Aa': '<b>–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: </b><code>Aa</code>, <code>Bb</code>, <code>Cc</code> <i>–∏ —Ç. –¥.</i><b>\n–°—É–º–º–∞: </b><code>‚Äî</code><b>\n–ù–∞–ø–∏—Å–∞–Ω–∏–µ:</b> <code>Aa</code>, <code>Bb</code>, <code>Cc</code> <i>–∏ —Ç. –¥. </i>\n\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É.</i>'
	}

	async def menu(self, call):
		await call.edit(
			text = self.strings['menu'],
			reply_markup=[{'text': '–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫', 'callback': self.list},{'text': '–ó–∞–∫—Ä—ã—Ç—å', "action": "close"}])
			
	async def list(self, call):
		await call.edit(
			text = self.strings['list'],
			reply_markup=[[{'text': '–í –º–µ–Ω—é', 'callback': self.menu},{'text': '–ó–∞–∫—Ä—ã—Ç—å', "action": "close"}],[{'text': 'K', 'callback': self.K},{'text': 'Qa', 'callback': self.Qa},{'text': 'O', 'callback': self.O}],[{'text': 'M', 'callback': self.M},{'text': 'Qi', 'callback': self.Qi},{'text': 'N', 'callback': self.N}],[{'text': 'B', 'callback': self.B},{'text': 'Sx', 'callback': self.Sx},{'text': 'D', 'callback': self.D}],[{'text': 'T', 'callback': self.T},{'text': 'Sp', 'callback': self.Sp},{'text': 'Aa, Bb...', 'callback': self.Aa}]])
	
	async def K(self, call):
		await call.edit(
			text = self.strings['K'],
			reply_markup=[{'text': 'üîô –ù–∞–∑–∞–¥', 'callback': self.list}])
			
	async def M(self, call):
		await call.edit(
			text = self.strings['M'],
			reply_markup=[{'text': 'üîô –ù–∞–∑–∞–¥', 'callback': self.list}])
	
	async def B(self, call):
		await call.edit(
			text = self.strings['B'],
			reply_markup=[{'text': 'üîô –ù–∞–∑–∞–¥', 'callback': self.list}])
	
	async def T(self, call):
		await call.edit(
			text = self.strings['T'],
			reply_markup=[{'text': 'üîô –ù–∞–∑–∞–¥', 'callback': self.list}])
			
	async def Qa(self, call):
		await call.edit(
			text = self.strings['Qa'],
			reply_markup=[{'text': 'üîô –ù–∞–∑–∞–¥', 'callback': self.list}])
	
	async def Qi(self, call):
		await call.edit(
			text = self.strings['Qi'],
			reply_markup=[{'text': 'üîô –ù–∞–∑–∞–¥', 'callback': self.list}])
			
	async def Sx(self, call):
		await call.edit(
			text = self.strings['Sx'],
			reply_markup=[{'text': 'üîô –ù–∞–∑–∞–¥', 'callback': self.list}])
			
	async def Sp(self, call):
		await call.edit(
			text = self.strings['Sp'],
			reply_markup=[{'text': 'üîô –ù–∞–∑–∞–¥', 'callback': self.list}])
			
	async def O(self, call):
		await call.edit(
			text = self.strings['O'],
			reply_markup=[{'text': 'üîô –ù–∞–∑–∞–¥', 'callback': self.list}])
			
	async def N(self, call):
		await call.edit(
			text = self.strings['N'],
			reply_markup=[{'text': 'üîô –ù–∞–∑–∞–¥', 'callback': self.list}])
			
	async def D(self, call):
		await call.edit(
			text = self.strings['D'],
			reply_markup=[{'text': 'üîô –ù–∞–∑–∞–¥', 'callback': self.list}])
			
	async def Aa(self, call):
		await call.edit(
			text = self.strings['Aa'],
			reply_markup=[{'text': 'üîô –ù–∞–∑–∞–¥', 'callback': self.list}])
			
	
	@loader.command()
	async def emmenu(self, message):
		"""–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
		await self.inline.form(
			message=message,
			text = self.strings['menu'],
			reply_markup=[{'text': '–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫', 'callback': self.list},{'text': '–ó–∞–∫—Ä—ã—Ç—å', "action": "close"}])
			
	#–ú–æ–¥—É–ª—å –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω
